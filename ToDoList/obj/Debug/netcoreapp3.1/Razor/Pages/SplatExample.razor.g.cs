#pragma checksum "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5fb107c6e8bd5feeb7d46b9ccd2180486fa4ed44"
// <auto-generated/>
#pragma warning disable 1591
namespace ToDoList.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using ToDoList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Repos\LearnBlazor\ToDoList\_Imports.razor"
using ToDoList.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/splat")]
    public partial class SplatExample : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "extra", "23");
            __builder.AddMultipleAttributes(2, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, object>>>(
#nullable restore
#line 2 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
                                 AdditionalAttributes

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(3, "\r\n    ");
            __builder.AddMarkupContent(4, "<h3>Splat and Unmatched Attributes Example</h3>\r\n");
            __builder.OpenElement(5, "input");
            __builder.AddAttribute(6, "id", "useIndividualParams");
            __builder.AddAttribute(7, "maxlength", 
#nullable restore
#line 5 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
                   MaxLength

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(8, "placeholder", 
#nullable restore
#line 6 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
                     Placeholder

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(9, "required", 
#nullable restore
#line 7 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
                  Required

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(10, "size", 
#nullable restore
#line 8 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
              Size

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(11, "\r\n\r\n");
            __builder.OpenElement(12, "input");
            __builder.AddAttribute(13, "id", "useAttributesDict");
            __builder.AddMultipleAttributes(14, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, object>>>(
#nullable restore
#line 10 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
                                           InputAttributes

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n\r\n");
            __builder.OpenComponent<ToDoList.Pages.ToDo>(16);
            __builder.AddComponentReferenceCapture(17, (__value) => {
#nullable restore
#line 12 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
            myTodo = (ToDoList.Pages.ToDo)__value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 14 "C:\Repos\LearnBlazor\ToDoList\Pages\SplatExample.razor"
       
        // The use case for splatting is when there are many knobs to turn on a component.    

        // Doing this with properties is yuck!
        [Parameter]
        public string MaxLength { get; set; } = "10";

    private ToDo myTodo;

    [Parameter]
    public string Placeholder { get; set; } = "Input placeholder text";

    [Parameter]
    public string Required { get; set; } = "required";

    [Parameter]
    public string Size { get; set; } = "50";

    // Better: Attribute Splatting
    public Dictionary<string, object> InputAttributes { get; set; } =
        new Dictionary<string, object>()
        {
            { "maxlength", "10" },
            { "placeholder", "Input placeholder text" },
            { "required", "required" },
            { "size", "50" },
        };

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } =
        new Dictionary<string, object>();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {        
        return base.OnAfterRenderAsync(firstRender)
        .ContinueWith(t =>
        {
        if (firstRender)
        {
            InvokeAsync(() =>
            {
                myTodo.AddTodo("Foo Bar Foo");
                StateHasChanged();
            });
            }
        });
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
